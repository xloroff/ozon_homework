// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
)

const addReserve = `-- name: AddReserve :exec
update stock
    set reserved = reserved + $2  
    where sku = $1
`

type AddReserveParams struct {
	Sku      int64
	Reserved int32
}

func (q *Queries) AddReserve(ctx context.Context, arg AddReserveParams) error {
	_, err := q.db.Exec(ctx, addReserve, arg.Sku, arg.Reserved)
	return err
}

const cancelReserve = `-- name: CancelReserve :exec
update stock
    set reserved = reserved - $2  
    where sku = $1
`

type CancelReserveParams struct {
	Sku      int64
	Reserved int32
}

func (q *Queries) CancelReserve(ctx context.Context, arg CancelReserveParams) error {
	_, err := q.db.Exec(ctx, cancelReserve, arg.Sku, arg.Reserved)
	return err
}

const delItemFromReserve = `-- name: DelItemFromReserve :exec
update stock
    set total_count = total_count - $2,
        reserved = reserved - $2  
    where sku = $1
`

type DelItemFromReserveParams struct {
	Sku        int64
	TotalCount int32
}

func (q *Queries) DelItemFromReserve(ctx context.Context, arg DelItemFromReserveParams) error {
	_, err := q.db.Exec(ctx, delItemFromReserve, arg.Sku, arg.TotalCount)
	return err
}

const getAvailableForReserve = `-- name: GetAvailableForReserve :one
select sku, total_count, reserved 
    from stock
    where sku = $1 limit 1
`

func (q *Queries) GetAvailableForReserve(ctx context.Context, sku int64) (Stock, error) {
	row := q.db.QueryRow(ctx, getAvailableForReserve, sku)
	var i Stock
	err := row.Scan(&i.Sku, &i.TotalCount, &i.Reserved)
	return i, err
}
