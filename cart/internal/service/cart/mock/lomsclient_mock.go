// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package mock

//go:generate minimock -i gitlab.ozon.dev/xloroff/ozon-hw-go/cart/internal/pkg/client/loms_cli.LomsOrder -o lomsclient_mock.go -n LomsClientMock -p mock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/xloroff/ozon-hw-go/cart/internal/model"
)

// LomsClientMock implements lomscli.LomsOrder
type LomsClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddOrder          func(userID int64, cart *model.Cart) (i1 int64, err error)
	inspectFuncAddOrder   func(userID int64, cart *model.Cart)
	afterAddOrderCounter  uint64
	beforeAddOrderCounter uint64
	AddOrderMock          mLomsClientMockAddOrder

	funcStockInfo          func(skuID int64) (u1 uint16, err error)
	inspectFuncStockInfo   func(skuID int64)
	afterStockInfoCounter  uint64
	beforeStockInfoCounter uint64
	StockInfoMock          mLomsClientMockStockInfo
}

// NewLomsClientMock returns a mock for lomscli.LomsOrder
func NewLomsClientMock(t minimock.Tester) *LomsClientMock {
	m := &LomsClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddOrderMock = mLomsClientMockAddOrder{mock: m}
	m.AddOrderMock.callArgs = []*LomsClientMockAddOrderParams{}

	m.StockInfoMock = mLomsClientMockStockInfo{mock: m}
	m.StockInfoMock.callArgs = []*LomsClientMockStockInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLomsClientMockAddOrder struct {
	optional           bool
	mock               *LomsClientMock
	defaultExpectation *LomsClientMockAddOrderExpectation
	expectations       []*LomsClientMockAddOrderExpectation

	callArgs []*LomsClientMockAddOrderParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// LomsClientMockAddOrderExpectation specifies expectation struct of the LomsOrder.AddOrder
type LomsClientMockAddOrderExpectation struct {
	mock      *LomsClientMock
	params    *LomsClientMockAddOrderParams
	paramPtrs *LomsClientMockAddOrderParamPtrs
	results   *LomsClientMockAddOrderResults
	Counter   uint64
}

// LomsClientMockAddOrderParams contains parameters of the LomsOrder.AddOrder
type LomsClientMockAddOrderParams struct {
	userID int64
	cart   *model.Cart
}

// LomsClientMockAddOrderParamPtrs contains pointers to parameters of the LomsOrder.AddOrder
type LomsClientMockAddOrderParamPtrs struct {
	userID *int64
	cart   **model.Cart
}

// LomsClientMockAddOrderResults contains results of the LomsOrder.AddOrder
type LomsClientMockAddOrderResults struct {
	i1  int64
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddOrder *mLomsClientMockAddOrder) Optional() *mLomsClientMockAddOrder {
	mmAddOrder.optional = true
	return mmAddOrder
}

// Expect sets up expected params for LomsOrder.AddOrder
func (mmAddOrder *mLomsClientMockAddOrder) Expect(userID int64, cart *model.Cart) *mLomsClientMockAddOrder {
	if mmAddOrder.mock.funcAddOrder != nil {
		mmAddOrder.mock.t.Fatalf("LomsClientMock.AddOrder mock is already set by Set")
	}

	if mmAddOrder.defaultExpectation == nil {
		mmAddOrder.defaultExpectation = &LomsClientMockAddOrderExpectation{}
	}

	if mmAddOrder.defaultExpectation.paramPtrs != nil {
		mmAddOrder.mock.t.Fatalf("LomsClientMock.AddOrder mock is already set by ExpectParams functions")
	}

	mmAddOrder.defaultExpectation.params = &LomsClientMockAddOrderParams{userID, cart}
	for _, e := range mmAddOrder.expectations {
		if minimock.Equal(e.params, mmAddOrder.defaultExpectation.params) {
			mmAddOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddOrder.defaultExpectation.params)
		}
	}

	return mmAddOrder
}

// ExpectUserIDParam1 sets up expected param userID for LomsOrder.AddOrder
func (mmAddOrder *mLomsClientMockAddOrder) ExpectUserIDParam1(userID int64) *mLomsClientMockAddOrder {
	if mmAddOrder.mock.funcAddOrder != nil {
		mmAddOrder.mock.t.Fatalf("LomsClientMock.AddOrder mock is already set by Set")
	}

	if mmAddOrder.defaultExpectation == nil {
		mmAddOrder.defaultExpectation = &LomsClientMockAddOrderExpectation{}
	}

	if mmAddOrder.defaultExpectation.params != nil {
		mmAddOrder.mock.t.Fatalf("LomsClientMock.AddOrder mock is already set by Expect")
	}

	if mmAddOrder.defaultExpectation.paramPtrs == nil {
		mmAddOrder.defaultExpectation.paramPtrs = &LomsClientMockAddOrderParamPtrs{}
	}
	mmAddOrder.defaultExpectation.paramPtrs.userID = &userID

	return mmAddOrder
}

// ExpectCartParam2 sets up expected param cart for LomsOrder.AddOrder
func (mmAddOrder *mLomsClientMockAddOrder) ExpectCartParam2(cart *model.Cart) *mLomsClientMockAddOrder {
	if mmAddOrder.mock.funcAddOrder != nil {
		mmAddOrder.mock.t.Fatalf("LomsClientMock.AddOrder mock is already set by Set")
	}

	if mmAddOrder.defaultExpectation == nil {
		mmAddOrder.defaultExpectation = &LomsClientMockAddOrderExpectation{}
	}

	if mmAddOrder.defaultExpectation.params != nil {
		mmAddOrder.mock.t.Fatalf("LomsClientMock.AddOrder mock is already set by Expect")
	}

	if mmAddOrder.defaultExpectation.paramPtrs == nil {
		mmAddOrder.defaultExpectation.paramPtrs = &LomsClientMockAddOrderParamPtrs{}
	}
	mmAddOrder.defaultExpectation.paramPtrs.cart = &cart

	return mmAddOrder
}

// Inspect accepts an inspector function that has same arguments as the LomsOrder.AddOrder
func (mmAddOrder *mLomsClientMockAddOrder) Inspect(f func(userID int64, cart *model.Cart)) *mLomsClientMockAddOrder {
	if mmAddOrder.mock.inspectFuncAddOrder != nil {
		mmAddOrder.mock.t.Fatalf("Inspect function is already set for LomsClientMock.AddOrder")
	}

	mmAddOrder.mock.inspectFuncAddOrder = f

	return mmAddOrder
}

// Return sets up results that will be returned by LomsOrder.AddOrder
func (mmAddOrder *mLomsClientMockAddOrder) Return(i1 int64, err error) *LomsClientMock {
	if mmAddOrder.mock.funcAddOrder != nil {
		mmAddOrder.mock.t.Fatalf("LomsClientMock.AddOrder mock is already set by Set")
	}

	if mmAddOrder.defaultExpectation == nil {
		mmAddOrder.defaultExpectation = &LomsClientMockAddOrderExpectation{mock: mmAddOrder.mock}
	}
	mmAddOrder.defaultExpectation.results = &LomsClientMockAddOrderResults{i1, err}
	return mmAddOrder.mock
}

// Set uses given function f to mock the LomsOrder.AddOrder method
func (mmAddOrder *mLomsClientMockAddOrder) Set(f func(userID int64, cart *model.Cart) (i1 int64, err error)) *LomsClientMock {
	if mmAddOrder.defaultExpectation != nil {
		mmAddOrder.mock.t.Fatalf("Default expectation is already set for the LomsOrder.AddOrder method")
	}

	if len(mmAddOrder.expectations) > 0 {
		mmAddOrder.mock.t.Fatalf("Some expectations are already set for the LomsOrder.AddOrder method")
	}

	mmAddOrder.mock.funcAddOrder = f
	return mmAddOrder.mock
}

// When sets expectation for the LomsOrder.AddOrder which will trigger the result defined by the following
// Then helper
func (mmAddOrder *mLomsClientMockAddOrder) When(userID int64, cart *model.Cart) *LomsClientMockAddOrderExpectation {
	if mmAddOrder.mock.funcAddOrder != nil {
		mmAddOrder.mock.t.Fatalf("LomsClientMock.AddOrder mock is already set by Set")
	}

	expectation := &LomsClientMockAddOrderExpectation{
		mock:   mmAddOrder.mock,
		params: &LomsClientMockAddOrderParams{userID, cart},
	}
	mmAddOrder.expectations = append(mmAddOrder.expectations, expectation)
	return expectation
}

// Then sets up LomsOrder.AddOrder return parameters for the expectation previously defined by the When method
func (e *LomsClientMockAddOrderExpectation) Then(i1 int64, err error) *LomsClientMock {
	e.results = &LomsClientMockAddOrderResults{i1, err}
	return e.mock
}

// Times sets number of times LomsOrder.AddOrder should be invoked
func (mmAddOrder *mLomsClientMockAddOrder) Times(n uint64) *mLomsClientMockAddOrder {
	if n == 0 {
		mmAddOrder.mock.t.Fatalf("Times of LomsClientMock.AddOrder mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddOrder.expectedInvocations, n)
	return mmAddOrder
}

func (mmAddOrder *mLomsClientMockAddOrder) invocationsDone() bool {
	if len(mmAddOrder.expectations) == 0 && mmAddOrder.defaultExpectation == nil && mmAddOrder.mock.funcAddOrder == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddOrder.mock.afterAddOrderCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddOrder.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddOrder implements lomscli.LomsOrder
func (mmAddOrder *LomsClientMock) AddOrder(userID int64, cart *model.Cart) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmAddOrder.beforeAddOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmAddOrder.afterAddOrderCounter, 1)

	if mmAddOrder.inspectFuncAddOrder != nil {
		mmAddOrder.inspectFuncAddOrder(userID, cart)
	}

	mm_params := LomsClientMockAddOrderParams{userID, cart}

	// Record call args
	mmAddOrder.AddOrderMock.mutex.Lock()
	mmAddOrder.AddOrderMock.callArgs = append(mmAddOrder.AddOrderMock.callArgs, &mm_params)
	mmAddOrder.AddOrderMock.mutex.Unlock()

	for _, e := range mmAddOrder.AddOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmAddOrder.AddOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddOrder.AddOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmAddOrder.AddOrderMock.defaultExpectation.params
		mm_want_ptrs := mmAddOrder.AddOrderMock.defaultExpectation.paramPtrs

		mm_got := LomsClientMockAddOrderParams{userID, cart}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmAddOrder.t.Errorf("LomsClientMock.AddOrder got unexpected parameter userID, want: %#v, got: %#v%s\n", *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

			if mm_want_ptrs.cart != nil && !minimock.Equal(*mm_want_ptrs.cart, mm_got.cart) {
				mmAddOrder.t.Errorf("LomsClientMock.AddOrder got unexpected parameter cart, want: %#v, got: %#v%s\n", *mm_want_ptrs.cart, mm_got.cart, minimock.Diff(*mm_want_ptrs.cart, mm_got.cart))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddOrder.t.Errorf("LomsClientMock.AddOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddOrder.AddOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmAddOrder.t.Fatal("No results are set for the LomsClientMock.AddOrder")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmAddOrder.funcAddOrder != nil {
		return mmAddOrder.funcAddOrder(userID, cart)
	}
	mmAddOrder.t.Fatalf("Unexpected call to LomsClientMock.AddOrder. %v %v", userID, cart)
	return
}

// AddOrderAfterCounter returns a count of finished LomsClientMock.AddOrder invocations
func (mmAddOrder *LomsClientMock) AddOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddOrder.afterAddOrderCounter)
}

// AddOrderBeforeCounter returns a count of LomsClientMock.AddOrder invocations
func (mmAddOrder *LomsClientMock) AddOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddOrder.beforeAddOrderCounter)
}

// Calls returns a list of arguments used in each call to LomsClientMock.AddOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddOrder *mLomsClientMockAddOrder) Calls() []*LomsClientMockAddOrderParams {
	mmAddOrder.mutex.RLock()

	argCopy := make([]*LomsClientMockAddOrderParams, len(mmAddOrder.callArgs))
	copy(argCopy, mmAddOrder.callArgs)

	mmAddOrder.mutex.RUnlock()

	return argCopy
}

// MinimockAddOrderDone returns true if the count of the AddOrder invocations corresponds
// the number of defined expectations
func (m *LomsClientMock) MinimockAddOrderDone() bool {
	if m.AddOrderMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddOrderMock.invocationsDone()
}

// MinimockAddOrderInspect logs each unmet expectation
func (m *LomsClientMock) MinimockAddOrderInspect() {
	for _, e := range m.AddOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsClientMock.AddOrder with params: %#v", *e.params)
		}
	}

	afterAddOrderCounter := mm_atomic.LoadUint64(&m.afterAddOrderCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddOrderMock.defaultExpectation != nil && afterAddOrderCounter < 1 {
		if m.AddOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsClientMock.AddOrder")
		} else {
			m.t.Errorf("Expected call to LomsClientMock.AddOrder with params: %#v", *m.AddOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddOrder != nil && afterAddOrderCounter < 1 {
		m.t.Error("Expected call to LomsClientMock.AddOrder")
	}

	if !m.AddOrderMock.invocationsDone() && afterAddOrderCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsClientMock.AddOrder but found %d calls",
			mm_atomic.LoadUint64(&m.AddOrderMock.expectedInvocations), afterAddOrderCounter)
	}
}

type mLomsClientMockStockInfo struct {
	optional           bool
	mock               *LomsClientMock
	defaultExpectation *LomsClientMockStockInfoExpectation
	expectations       []*LomsClientMockStockInfoExpectation

	callArgs []*LomsClientMockStockInfoParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// LomsClientMockStockInfoExpectation specifies expectation struct of the LomsOrder.StockInfo
type LomsClientMockStockInfoExpectation struct {
	mock      *LomsClientMock
	params    *LomsClientMockStockInfoParams
	paramPtrs *LomsClientMockStockInfoParamPtrs
	results   *LomsClientMockStockInfoResults
	Counter   uint64
}

// LomsClientMockStockInfoParams contains parameters of the LomsOrder.StockInfo
type LomsClientMockStockInfoParams struct {
	skuID int64
}

// LomsClientMockStockInfoParamPtrs contains pointers to parameters of the LomsOrder.StockInfo
type LomsClientMockStockInfoParamPtrs struct {
	skuID *int64
}

// LomsClientMockStockInfoResults contains results of the LomsOrder.StockInfo
type LomsClientMockStockInfoResults struct {
	u1  uint16
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmStockInfo *mLomsClientMockStockInfo) Optional() *mLomsClientMockStockInfo {
	mmStockInfo.optional = true
	return mmStockInfo
}

// Expect sets up expected params for LomsOrder.StockInfo
func (mmStockInfo *mLomsClientMockStockInfo) Expect(skuID int64) *mLomsClientMockStockInfo {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("LomsClientMock.StockInfo mock is already set by Set")
	}

	if mmStockInfo.defaultExpectation == nil {
		mmStockInfo.defaultExpectation = &LomsClientMockStockInfoExpectation{}
	}

	if mmStockInfo.defaultExpectation.paramPtrs != nil {
		mmStockInfo.mock.t.Fatalf("LomsClientMock.StockInfo mock is already set by ExpectParams functions")
	}

	mmStockInfo.defaultExpectation.params = &LomsClientMockStockInfoParams{skuID}
	for _, e := range mmStockInfo.expectations {
		if minimock.Equal(e.params, mmStockInfo.defaultExpectation.params) {
			mmStockInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStockInfo.defaultExpectation.params)
		}
	}

	return mmStockInfo
}

// ExpectSkuIDParam1 sets up expected param skuID for LomsOrder.StockInfo
func (mmStockInfo *mLomsClientMockStockInfo) ExpectSkuIDParam1(skuID int64) *mLomsClientMockStockInfo {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("LomsClientMock.StockInfo mock is already set by Set")
	}

	if mmStockInfo.defaultExpectation == nil {
		mmStockInfo.defaultExpectation = &LomsClientMockStockInfoExpectation{}
	}

	if mmStockInfo.defaultExpectation.params != nil {
		mmStockInfo.mock.t.Fatalf("LomsClientMock.StockInfo mock is already set by Expect")
	}

	if mmStockInfo.defaultExpectation.paramPtrs == nil {
		mmStockInfo.defaultExpectation.paramPtrs = &LomsClientMockStockInfoParamPtrs{}
	}
	mmStockInfo.defaultExpectation.paramPtrs.skuID = &skuID

	return mmStockInfo
}

// Inspect accepts an inspector function that has same arguments as the LomsOrder.StockInfo
func (mmStockInfo *mLomsClientMockStockInfo) Inspect(f func(skuID int64)) *mLomsClientMockStockInfo {
	if mmStockInfo.mock.inspectFuncStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("Inspect function is already set for LomsClientMock.StockInfo")
	}

	mmStockInfo.mock.inspectFuncStockInfo = f

	return mmStockInfo
}

// Return sets up results that will be returned by LomsOrder.StockInfo
func (mmStockInfo *mLomsClientMockStockInfo) Return(u1 uint16, err error) *LomsClientMock {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("LomsClientMock.StockInfo mock is already set by Set")
	}

	if mmStockInfo.defaultExpectation == nil {
		mmStockInfo.defaultExpectation = &LomsClientMockStockInfoExpectation{mock: mmStockInfo.mock}
	}
	mmStockInfo.defaultExpectation.results = &LomsClientMockStockInfoResults{u1, err}
	return mmStockInfo.mock
}

// Set uses given function f to mock the LomsOrder.StockInfo method
func (mmStockInfo *mLomsClientMockStockInfo) Set(f func(skuID int64) (u1 uint16, err error)) *LomsClientMock {
	if mmStockInfo.defaultExpectation != nil {
		mmStockInfo.mock.t.Fatalf("Default expectation is already set for the LomsOrder.StockInfo method")
	}

	if len(mmStockInfo.expectations) > 0 {
		mmStockInfo.mock.t.Fatalf("Some expectations are already set for the LomsOrder.StockInfo method")
	}

	mmStockInfo.mock.funcStockInfo = f
	return mmStockInfo.mock
}

// When sets expectation for the LomsOrder.StockInfo which will trigger the result defined by the following
// Then helper
func (mmStockInfo *mLomsClientMockStockInfo) When(skuID int64) *LomsClientMockStockInfoExpectation {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("LomsClientMock.StockInfo mock is already set by Set")
	}

	expectation := &LomsClientMockStockInfoExpectation{
		mock:   mmStockInfo.mock,
		params: &LomsClientMockStockInfoParams{skuID},
	}
	mmStockInfo.expectations = append(mmStockInfo.expectations, expectation)
	return expectation
}

// Then sets up LomsOrder.StockInfo return parameters for the expectation previously defined by the When method
func (e *LomsClientMockStockInfoExpectation) Then(u1 uint16, err error) *LomsClientMock {
	e.results = &LomsClientMockStockInfoResults{u1, err}
	return e.mock
}

// Times sets number of times LomsOrder.StockInfo should be invoked
func (mmStockInfo *mLomsClientMockStockInfo) Times(n uint64) *mLomsClientMockStockInfo {
	if n == 0 {
		mmStockInfo.mock.t.Fatalf("Times of LomsClientMock.StockInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmStockInfo.expectedInvocations, n)
	return mmStockInfo
}

func (mmStockInfo *mLomsClientMockStockInfo) invocationsDone() bool {
	if len(mmStockInfo.expectations) == 0 && mmStockInfo.defaultExpectation == nil && mmStockInfo.mock.funcStockInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmStockInfo.mock.afterStockInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmStockInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// StockInfo implements lomscli.LomsOrder
func (mmStockInfo *LomsClientMock) StockInfo(skuID int64) (u1 uint16, err error) {
	mm_atomic.AddUint64(&mmStockInfo.beforeStockInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmStockInfo.afterStockInfoCounter, 1)

	if mmStockInfo.inspectFuncStockInfo != nil {
		mmStockInfo.inspectFuncStockInfo(skuID)
	}

	mm_params := LomsClientMockStockInfoParams{skuID}

	// Record call args
	mmStockInfo.StockInfoMock.mutex.Lock()
	mmStockInfo.StockInfoMock.callArgs = append(mmStockInfo.StockInfoMock.callArgs, &mm_params)
	mmStockInfo.StockInfoMock.mutex.Unlock()

	for _, e := range mmStockInfo.StockInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmStockInfo.StockInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStockInfo.StockInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmStockInfo.StockInfoMock.defaultExpectation.params
		mm_want_ptrs := mmStockInfo.StockInfoMock.defaultExpectation.paramPtrs

		mm_got := LomsClientMockStockInfoParams{skuID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.skuID != nil && !minimock.Equal(*mm_want_ptrs.skuID, mm_got.skuID) {
				mmStockInfo.t.Errorf("LomsClientMock.StockInfo got unexpected parameter skuID, want: %#v, got: %#v%s\n", *mm_want_ptrs.skuID, mm_got.skuID, minimock.Diff(*mm_want_ptrs.skuID, mm_got.skuID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStockInfo.t.Errorf("LomsClientMock.StockInfo got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStockInfo.StockInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmStockInfo.t.Fatal("No results are set for the LomsClientMock.StockInfo")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmStockInfo.funcStockInfo != nil {
		return mmStockInfo.funcStockInfo(skuID)
	}
	mmStockInfo.t.Fatalf("Unexpected call to LomsClientMock.StockInfo. %v", skuID)
	return
}

// StockInfoAfterCounter returns a count of finished LomsClientMock.StockInfo invocations
func (mmStockInfo *LomsClientMock) StockInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStockInfo.afterStockInfoCounter)
}

// StockInfoBeforeCounter returns a count of LomsClientMock.StockInfo invocations
func (mmStockInfo *LomsClientMock) StockInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStockInfo.beforeStockInfoCounter)
}

// Calls returns a list of arguments used in each call to LomsClientMock.StockInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStockInfo *mLomsClientMockStockInfo) Calls() []*LomsClientMockStockInfoParams {
	mmStockInfo.mutex.RLock()

	argCopy := make([]*LomsClientMockStockInfoParams, len(mmStockInfo.callArgs))
	copy(argCopy, mmStockInfo.callArgs)

	mmStockInfo.mutex.RUnlock()

	return argCopy
}

// MinimockStockInfoDone returns true if the count of the StockInfo invocations corresponds
// the number of defined expectations
func (m *LomsClientMock) MinimockStockInfoDone() bool {
	if m.StockInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.StockInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.StockInfoMock.invocationsDone()
}

// MinimockStockInfoInspect logs each unmet expectation
func (m *LomsClientMock) MinimockStockInfoInspect() {
	for _, e := range m.StockInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsClientMock.StockInfo with params: %#v", *e.params)
		}
	}

	afterStockInfoCounter := mm_atomic.LoadUint64(&m.afterStockInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.StockInfoMock.defaultExpectation != nil && afterStockInfoCounter < 1 {
		if m.StockInfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsClientMock.StockInfo")
		} else {
			m.t.Errorf("Expected call to LomsClientMock.StockInfo with params: %#v", *m.StockInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStockInfo != nil && afterStockInfoCounter < 1 {
		m.t.Error("Expected call to LomsClientMock.StockInfo")
	}

	if !m.StockInfoMock.invocationsDone() && afterStockInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsClientMock.StockInfo but found %d calls",
			mm_atomic.LoadUint64(&m.StockInfoMock.expectedInvocations), afterStockInfoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LomsClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddOrderInspect()

			m.MinimockStockInfoInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LomsClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LomsClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddOrderDone() &&
		m.MinimockStockInfoDone()
}
